module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  name: String!
  inviteToken: String
  inviteAccepted: Boolean!
  emailConfirmed: Boolean!
  emailConfirmToken: String
  resetToken: String
  resetExpires: DateTime
  deletedAt: DateTime
  lastLogin: DateTime
  joinedAt: DateTime!
  isSuper: Boolean!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  name: String!
  inviteToken: String
  inviteAccepted: Boolean
  emailConfirmed: Boolean
  emailConfirmToken: String
  resetToken: String
  resetExpires: DateTime
  deletedAt: DateTime
  lastLogin: DateTime
  joinedAt: DateTime!
  isSuper: Boolean
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  inviteToken_ASC
  inviteToken_DESC
  inviteAccepted_ASC
  inviteAccepted_DESC
  emailConfirmed_ASC
  emailConfirmed_DESC
  emailConfirmToken_ASC
  emailConfirmToken_DESC
  resetToken_ASC
  resetToken_DESC
  resetExpires_ASC
  resetExpires_DESC
  deletedAt_ASC
  deletedAt_DESC
  lastLogin_ASC
  lastLogin_DESC
  joinedAt_ASC
  joinedAt_DESC
  isSuper_ASC
  isSuper_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  inviteToken: String
  inviteAccepted: Boolean!
  emailConfirmed: Boolean!
  emailConfirmToken: String
  resetToken: String
  resetExpires: DateTime
  deletedAt: DateTime
  lastLogin: DateTime
  joinedAt: DateTime!
  isSuper: Boolean!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  inviteToken: String
  inviteAccepted: Boolean
  emailConfirmed: Boolean
  emailConfirmToken: String
  resetToken: String
  resetExpires: DateTime
  deletedAt: DateTime
  lastLogin: DateTime
  joinedAt: DateTime
  isSuper: Boolean
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  name: String
  inviteToken: String
  inviteAccepted: Boolean
  emailConfirmed: Boolean
  emailConfirmToken: String
  resetToken: String
  resetExpires: DateTime
  deletedAt: DateTime
  lastLogin: DateTime
  joinedAt: DateTime
  isSuper: Boolean
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  inviteToken: String
  inviteToken_not: String
  inviteToken_in: [String!]
  inviteToken_not_in: [String!]
  inviteToken_lt: String
  inviteToken_lte: String
  inviteToken_gt: String
  inviteToken_gte: String
  inviteToken_contains: String
  inviteToken_not_contains: String
  inviteToken_starts_with: String
  inviteToken_not_starts_with: String
  inviteToken_ends_with: String
  inviteToken_not_ends_with: String
  inviteAccepted: Boolean
  inviteAccepted_not: Boolean
  emailConfirmed: Boolean
  emailConfirmed_not: Boolean
  emailConfirmToken: String
  emailConfirmToken_not: String
  emailConfirmToken_in: [String!]
  emailConfirmToken_not_in: [String!]
  emailConfirmToken_lt: String
  emailConfirmToken_lte: String
  emailConfirmToken_gt: String
  emailConfirmToken_gte: String
  emailConfirmToken_contains: String
  emailConfirmToken_not_contains: String
  emailConfirmToken_starts_with: String
  emailConfirmToken_not_starts_with: String
  emailConfirmToken_ends_with: String
  emailConfirmToken_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetExpires: DateTime
  resetExpires_not: DateTime
  resetExpires_in: [DateTime!]
  resetExpires_not_in: [DateTime!]
  resetExpires_lt: DateTime
  resetExpires_lte: DateTime
  resetExpires_gt: DateTime
  resetExpires_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  lastLogin: DateTime
  lastLogin_not: DateTime
  lastLogin_in: [DateTime!]
  lastLogin_not_in: [DateTime!]
  lastLogin_lt: DateTime
  lastLogin_lte: DateTime
  lastLogin_gt: DateTime
  lastLogin_gte: DateTime
  joinedAt: DateTime
  joinedAt_not: DateTime
  joinedAt_in: [DateTime!]
  joinedAt_not_in: [DateTime!]
  joinedAt_lt: DateTime
  joinedAt_lte: DateTime
  joinedAt_gt: DateTime
  joinedAt_gte: DateTime
  isSuper: Boolean
  isSuper_not: Boolean
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    